name: Release DeepFilterNet framework for iOS

on:
    workflow_dispatch:
    push:
      branches: main
    schedule:
      - cron: '0 0 */7 * *'

jobs:
  release-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest DeepFilterNet workflow run ID
        uses: actions/github-script@v7
        id: get_run_id
        with:
          script: |
            const owner = 'KaleyraVideo';
            const repo = 'DeepFilterNet';
            const workflowId = '166526728';

            const { data } = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflowId,
              status: 'success',
              per_page: 1,
              sort: 'created',
              direction: 'desc',
            });

            if (data.workflow_runs.length > 0) {
              return data.workflow_runs[0].id;
            } else {
              core.setFailed('No successful workflow run found in the other repository.');
              return null;
            }

      - name: Download iOS framework
        uses: actions/download-artifact@v4
        with:
          repository: KaleyraVideo/DeepFilterNet
          run-id: ${{ steps.get_run_id.outputs.result }}
          name: Binaries
          path: ./downloaded-artifacts/Binaries
          github-token: ${{ github.token }}

      - name: Calculate Checksum
        id: calculate-checksum
        working-directory: ./downloaded-artifacts/Binaries
        run: |
            ls -al;
            echo "checksum=$(swift package compute-checksum ./DeepFilterNet.xcframework.zip)" >> $GITHUB_OUTPUT;

      - name: Check if framework changed since last release
        id: check-if-should-release
        run: |
          PACKAGE_CHECKSUM=$(grep -o 'checksum[[:space:]]*:[[:space:]]*"[^"]*"' Package.swift | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
          CURRENT_CHECKSUM="${{ steps.calculate-checksum.outputs.checksum }}"

          echo "Checksum in Package.swift: $PACKAGE_CHECKSUM"
          echo "Current checksum: $CURRENT_CHECKSUM"

          if [ "$PACKAGE_CHECKSUM" = "$CURRENT_CHECKSUM" ]; then
            echo "⏭️ No updates to release, skipping next steps."
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "✅ A new update needs to be released, proceding..."
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Name
        id: generate-release-name
        if: steps.check-if-should-release.outputs.should_release == 'true'
        run: |
          RELEASE_NAME="0.0.${{ github.run_number }}"
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Update Package.swift
        if: steps.check-if-should-release.outputs.should_release == 'true'
        run: |
          CHECKSUM="${{ steps.calculate-checksum.outputs.checksum }}"
          sed -i '' "s|url: \".*\"|url: \"https://github.com/${{ github.repository }}/releases/download/${{ steps.generate-release-name.outputs.release_name }}/DeepFilterNet.xcframework.zip\"|g" Package.swift
          sed -i '' "s|checksum: \".*\"|checksum: \"$CHECKSUM\"|g" Package.swift

      - name: Commit Package.swift changes
        if: steps.check-if-should-release.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Package.swift
          git commit -m "Update Package.swift for release ${{ github.ref_name }}"
          git push
          git tag ${{ steps.generate-release-name.outputs.release_name }}
          git push origin ${{ steps.generate-release-name.outputs.release_name }}

      - name: Create Release
        id: create_release
        if: steps.check-if-should-release.outputs.should_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate-release-name.outputs.release_name }}
          release_name: Release ${{ steps.generate-release-name.outputs.release_name }}

      - name: Upload XCFramework
        if: steps.check-if-should-release.outputs.should_release == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloaded-artifacts/Binaries/DeepFilterNet.xcframework.zip
          asset_name: DeepFilterNet.xcframework.zip
          asset_content_type: application/zip
